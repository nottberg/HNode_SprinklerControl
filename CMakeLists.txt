CMAKE_MINIMUM_REQUIRED( VERSION 2.8 ) 
PROJECT( hnode_irrigation_daemon ) 

SET( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/" )

SET( HNODE_SPRINKLER_CTRL_SRC
     ${CMAKE_SOURCE_DIR}/src/hnode.cpp
     ${CMAKE_SOURCE_DIR}/src/ilink-obj.c
     ${CMAKE_SOURCE_DIR}/src/i2c_mcp23008.c
     ${CMAKE_SOURCE_DIR}/src/mcp23008-obj.c
     ${CMAKE_SOURCE_DIR}/src/sprinkler_controller.c

     ${CMAKE_SOURCE_DIR}/src/REST/RESTDeamon.cpp
     ${CMAKE_SOURCE_DIR}/src/REST/RESTRepresentation.cpp
     ${CMAKE_SOURCE_DIR}/src/REST/RESTRequest.cpp
     ${CMAKE_SOURCE_DIR}/src/REST/RESTResource.cpp

     ${CMAKE_SOURCE_DIR}/src/Switch.cpp
     ${CMAKE_SOURCE_DIR}/src/SwitchDevice.cpp
     ${CMAKE_SOURCE_DIR}/src/SwitchManager.cpp
     ${CMAKE_SOURCE_DIR}/src/SwitchResource.cpp
     ${CMAKE_SOURCE_DIR}/src/I2CExpander.cpp
     ${CMAKE_SOURCE_DIR}/src/MCP23008Expander.cpp
     ${CMAKE_SOURCE_DIR}/src/ZoneManager.cpp
)

SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_USE_MULTITHREADED OFF)
SET(Boost_USE_STATIC_RUNTIME OFF)
SET(Boost_DEBUG OFF)

FIND_PACKAGE(GLIB REQUIRED)
FIND_PACKAGE(GOBJECT REQUIRED)
FIND_PACKAGE(AVAHI REQUIRED)
FIND_PACKAGE(HNODE REQUIRED)
FIND_PACKAGE(LibXml2 REQUIRED)
FIND_PACKAGE(MICROHTTPD REQUIRED)
FIND_PACKAGE(Boost 1.49.0 COMPONENTS regex) 

INCLUDE_DIRECTORIES( ${GLIB_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${GOBJECT_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${AVAHI_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${HNODE_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${MICROHTTPD_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${LIBXML2_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR}/src )

ADD_EXECUTABLE( hnode_irrigation_daemon ${HNODE_SPRINKLER_CTRL_SRC} ) 
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${GLIB_LIBRARIES} )
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${GOBJECT_LIBRARIES} )
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${AVAHI_LIBRARIES} )
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${HNODE_LIBRARIES} )
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${LIBXML2_LIBRARIES} )
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${MICROHTTPD_LIBRARIES} )
TARGET_LINK_LIBRARIES( hnode_irrigation_daemon ${Boost_LIBRARIES} )

